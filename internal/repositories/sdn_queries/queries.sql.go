// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sdn_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM sdn_list WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getSdnById = `-- name: GetSdnById :one
SELECT id, uid, first_name, last_name, created_at FROM sdn_list WHERE id = $1
`

func (q *Queries) GetSdnById(ctx context.Context, id int32) (SdnList, error) {
	row := q.db.QueryRow(ctx, getSdnById, id)
	var i SdnList
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const getSdnByUid = `-- name: GetSdnByUid :many
SELECT id, uid, first_name, last_name, created_at FROM sdn_list WHERE uid = $1
`

func (q *Queries) GetSdnByUid(ctx context.Context, uid int64) ([]SdnList, error) {
	rows, err := q.db.Query(ctx, getSdnByUid, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SdnList
	for rows.Next() {
		var i SdnList
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSdnByUidAndName = `-- name: GetSdnByUidAndName :one
SELECT id, uid, first_name, last_name, created_at FROM sdn_list WHERE uid = $1 AND first_name = $2 AND last_name = $3
`

type GetSdnByUidAndNameParams struct {
	Uid       int64       `json:"uid"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
}

func (q *Queries) GetSdnByUidAndName(ctx context.Context, arg GetSdnByUidAndNameParams) (SdnList, error) {
	row := q.db.QueryRow(ctx, getSdnByUidAndName, arg.Uid, arg.FirstName, arg.LastName)
	var i SdnList
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const insertSdn = `-- name: InsertSdn :one
INSERT INTO sdn_list (uid, first_name, last_name) VALUES ($1, $2, $3) RETURNING id
`

type InsertSdnParams struct {
	Uid       int64       `json:"uid"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
}

func (q *Queries) InsertSdn(ctx context.Context, arg InsertSdnParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertSdn, arg.Uid, arg.FirstName, arg.LastName)
	var id int32
	err := row.Scan(&id)
	return id, err
}
